MATTERMOST PLUGIN DEVELOPMENT GUIDE FOR AI

This guide contains essential information for developing Mattermost server plugins.

1. PLUGIN STRUCTURE AND CONVENTIONS

1.1 Project Layout
- Follow Go team's standardized guidelines
- Avoid using generic "pkg" directories
- Don't use "util" or "misc" packages
- Group related functionality into meaningful packages
- Don't create too many small single-file packages

1.2 Code Style
- Use CamelCase for variables/constants (e.g., WebsocketEventPostEdited)
- Use "err" for error variables and "appErr" for *model.AppError variables
- Use empty string check with foo == "" instead of len(foo) == 0
- Use proper initialisms (userID not userId, HTTP not Http)
- Use meaningful receiver names (e.g., "c" or "cl" for "Client")

2. PLUGIN DEVELOPMENT PRINCIPLES

2.1 Synchronous vs Asynchronous
- Default to synchronous functions
- Only use async when performance benefits are proven
- Control goroutine lifetimes
- Consider error propagation and back-pressure

2.2 Interface Design
- Return structs, accept interfaces
- Interface names should end with "-er"
- Define interfaces in consuming packages
- Use small, composable interfaces

2.3 Error Handling
- Use appropriate error types (error vs *model.AppError)
- Follow error variable naming conventions
- Propagate errors appropriately

3. PLUGIN API REFERENCE

3.1 Key Plugin Hooks

Lifecycle Hooks:
func (p *Plugin) OnActivate() error
    // Called when the plugin is activated. If an error is returned, the plugin will be terminated.

func (p *Plugin) OnDeactivate() error
    // Called when the plugin is deactivated. Clean up any resources.

func (p *Plugin) OnConfigurationChange() error
    // Called whenever the plugin's configuration changes.

func (p *Plugin) OnInstall(c *plugin.Context, event model.OnInstallEvent) error
    // Called after plugin installation during onboarding

func (p *Plugin) OnSendDailyTelemetry()
    // Called when server sends daily telemetry data

func (p *Plugin) OnCloudLimitsUpdated(limits *model.ProductLimits)
    // Called when cloud product limits change

func (p *Plugin) ConfigurationWillBeSaved(newCfg *model.Config) (*model.Config, error)
    // Called before saving configuration changes

func (p *Plugin) GenerateSupportData(c *plugin.Context) ([]*model.FileData, error)
    // Called when generating support packet data

HTTP Hooks:
func (p *Plugin) ServeHTTP(c *plugin.Context, w http.ResponseWriter, r *http.Request)
    // Called for HTTP/HTTPS requests to plugin endpoints

func (p *Plugin) ServeMetrics(c *plugin.Context, w http.ResponseWriter, r *http.Request)
    // Called to serve plugin metrics endpoint

Command Hooks:
func (p *Plugin) ExecuteCommand(c *plugin.Context, args *model.CommandArgs) (*model.CommandResponse, error)
    // Called when a registered command is triggered

User Hooks:
func (p *Plugin) UserHasBeenCreated(c *plugin.Context, user *model.User)
    // Called after user creation

func (p *Plugin) UserWillLogIn(c *plugin.Context, user *model.User) string
    // Called before user login, can reject by returning error string

func (p *Plugin) UserHasLoggedIn(c *plugin.Context, user *model.User)
    // Called after successful user login

func (p *Plugin) UserHasBeenDeactivated(c *plugin.Context, user *model.User)
    // Called when a user is deactivated

Post Hooks:
func (p *Plugin) MessageWillBePosted(c *plugin.Context, post *model.Post) (*model.Post, string)
    // Called before saving a post, can modify or reject

func (p *Plugin) MessageWillBeUpdated(c *plugin.Context, newPost, oldPost *model.Post) (*model.Post, string)
    // Called before updating a post, can modify or reject

func (p *Plugin) MessageHasBeenPosted(c *plugin.Context, post *model.Post)
    // Called after post is saved

func (p *Plugin) MessageHasBeenUpdated(c *plugin.Context, newPost, oldPost *model.Post)
    // Called after post is updated

func (p *Plugin) MessagesWillBeConsumed(posts []*model.Post) []*model.Post
    // Called when posts are requested by client

func (p *Plugin) MessageHasBeenDeleted(c *plugin.Context, post *model.Post)
    // Called after post deletion

Channel Hooks:
func (p *Plugin) ChannelHasBeenCreated(c *plugin.Context, channel *model.Channel)
    // Called after channel creation

func (p *Plugin) UserHasJoinedChannel(c *plugin.Context, channelMember *model.ChannelMember, actor *model.User)
    // Called after user joins channel

func (p *Plugin) UserHasLeftChannel(c *plugin.Context, channelMember *model.ChannelMember, actor *model.User)
    // Called after user leaves channel

Team Hooks:
func (p *Plugin) UserHasJoinedTeam(c *plugin.Context, teamMember *model.TeamMember, actor *model.User)
    // Called after user joins team

func (p *Plugin) UserHasLeftTeam(c *plugin.Context, teamMember *model.TeamMember, actor *model.User)
    // Called after user leaves team

File Hooks:
func (p *Plugin) FileWillBeUploaded(c *plugin.Context, info *model.FileInfo, file io.Reader, output io.Writer) (*model.FileInfo, string)
    // Called before file upload, can modify or reject

Reaction Hooks:
func (p *Plugin) ReactionHasBeenAdded(c *plugin.Context, reaction *model.Reaction)
    // Called after reaction is added

func (p *Plugin) ReactionHasBeenRemoved(c *plugin.Context, reaction *model.Reaction)
    // Called after reaction is removed

WebSocket Hooks:
func (p *Plugin) OnWebSocketConnect(webConnID, userID string)
    // Called when WebSocket connection opens

func (p *Plugin) OnWebSocketDisconnect(webConnID, userID string)
    // Called when WebSocket connection closes

func (p *Plugin) WebSocketMessageHasBeenPosted(webConnID, userID string, req *model.WebSocketRequest)
    // Called when WebSocket message received

Shared Channel Hooks:
func (p *Plugin) OnSharedChannelsSyncMsg(msg *model.SyncMsg, rc *model.RemoteCluster) (model.SyncResponse, error)
    // Called for shared channel sync messages

func (p *Plugin) OnSharedChannelsPing(rc *model.RemoteCluster) bool
    // Called to check shared channel health

func (p *Plugin) OnSharedChannelsAttachmentSyncMsg(fi *model.FileInfo, post *model.Post, rc *model.RemoteCluster) error
    // Called for shared channel attachment sync

func (p *Plugin) OnSharedChannelsProfileImageSyncMsg(user *model.User, rc *model.RemoteCluster) error
    // Called for shared channel profile image sync

Other Hooks:
func (p *Plugin) OnPluginClusterEvent(c *plugin.Context, ev model.PluginClusterEvent)
    // Called for plugin cluster events

func (p *Plugin) RunDataRetention(nowTime, batchSize int64) (int64, error)
    // Called during data retention jobs

func (p *Plugin) NotificationWillBePushed(pushNotification *model.PushNotification, userID string) (*model.PushNotification, string)
    // Called before push notification is sent

func (p *Plugin) PreferencesHaveChanged(c *plugin.Context, preferences []model.Preference)
    // Called after user preferences change

HTTP Hooks:
func (p *Plugin) ServeHTTP(c *plugin.Context, w http.ResponseWriter, r *http.Request)
    // Called for HTTP/HTTPS requests to the plugin's endpoint.

Command Hooks:
func (p *Plugin) ExecuteCommand(c *plugin.Context, args *model.CommandArgs) (*model.CommandResponse, error)
    // Called when a command registered by the plugin is triggered.

Post Hooks:
func (p *Plugin) MessageWillBePosted(c *plugin.Context, post *model.Post) (*model.Post, string, error)
    // Called before a post is saved to the database.

func (p *Plugin) MessageHasBeenPosted(c *plugin.Context, post *model.Post)
    // Called after a post has been saved to the database.

func (p *Plugin) MessageWillBeUpdated(c *plugin.Context, newPost, oldPost *model.Post) (*model.Post, string, error)
    // Called before a post is updated in the database.

func (p *Plugin) MessageHasBeenUpdated(c *plugin.Context, newPost, oldPost *model.Post)
    // Called after a post has been updated in the database.

User Hooks:
func (p *Plugin) UserHasLoggedIn(c *plugin.Context, user *model.User)
    // Called after a user has logged in.

func (p *Plugin) UserHasLoggedOut(c *plugin.Context, user *model.User)
    // Called after a user has logged out.

func (p *Plugin) UserWillLogIn(c *plugin.Context, user *model.User) string
    // Called before a user attempts to log in.

Channel Hooks:
func (p *Plugin) ChannelHasBeenCreated(c *plugin.Context, channel *model.Channel)
    // Called after a channel has been created.

func (p *Plugin) UserHasJoinedChannel(c *plugin.Context, channelMember *model.ChannelMember, actor *model.User)
    // Called after a user has joined a channel.

func (p *Plugin) UserHasLeftChannel(c *plugin.Context, channelMember *model.ChannelMember, actor *model.User)
    // Called after a user has left a channel.

Team Hooks:
func (p *Plugin) UserHasJoinedTeam(c *plugin.Context, teamMember *model.TeamMember, actor *model.User)
    // Called after a user has joined a team.

func (p *Plugin) UserHasLeftTeam(c *plugin.Context, teamMember *model.TeamMember, actor *model.User)
    // Called after a user has left a team.

File Hooks:
func (p *Plugin) FileWillBeUploaded(c *plugin.Context, info *model.FileInfo, file io.Reader, output io.Writer) (*model.FileInfo, string, error)
    // Called before a file is uploaded.

3.2 Common API Operations

Configuration Management:
func (p *Plugin) GetConfig() *model.Config
    // Returns the current server configuration

func (p *Plugin) SavePluginConfig(config interface{}) error
    // Saves the plugin's configuration

func (p *Plugin) LoadPluginConfiguration(dest interface{}) error
    // Loads plugin configuration into destination interface

func (p *Plugin) RegisterPluginConfigChangeHandler(handler func()) string
    // Registers a handler for plugin config changes

User Operations:
func (p *Plugin) GetUser(userID string) (*model.User, error)
    // Gets a user by their ID

func (p *Plugin) GetUserByEmail(email string) (*model.User, error)
    // Gets a user by their email address

func (p *Plugin) GetUserByUsername(username string) (*model.User, error)
    // Gets a user by their username

func (p *Plugin) GetUsers(options *model.UserGetOptions) ([]*model.User, error)
    // Gets users based on search options

func (p *Plugin) GetUsersInTeam(teamID string, page int, perPage int) ([]*model.User, error)
    // Gets users in a specific team

func (p *Plugin) UpdateUser(user *model.User) (*model.User, error)
    // Updates a user's information

func (p *Plugin) DeleteUser(userID string) error
    // Permanently deletes a user

func (p *Plugin) GetUserStatus(userID string) (*model.Status, error)
    // Gets a user's status

func (p *Plugin) UpdateUserStatus(userID, status string) (*model.Status, error)
    // Updates a user's status

Team Operations:
func (p *Plugin) GetTeam(teamID string) (*model.Team, error)
    // Gets a team by its ID

func (p *Plugin) GetTeamByName(name string) (*model.Team, error)
    // Gets a team by its name

func (p *Plugin) GetTeams() ([]*model.Team, error)
    // Gets all teams

func (p *Plugin) CreateTeam(team *model.Team) (*model.Team, error)
    // Creates a new team

func (p *Plugin) UpdateTeam(team *model.Team) (*model.Team, error)
    // Updates a team

func (p *Plugin) DeleteTeam(teamID string) error
    // Soft deletes a team

func (p *Plugin) GetTeamsForUser(userID string) ([]*model.Team, error)
    // Gets teams a user belongs to

Channel Operations:
func (p *Plugin) GetChannel(channelID string) (*model.Channel, error)
    // Gets a channel by its ID

func (p *Plugin) GetChannelByName(teamID, name string, includeDeleted bool) (*model.Channel, error)
    // Gets a channel by its name

func (p *Plugin) GetChannelsForTeam(teamID string) ([]*model.Channel, error)
    // Gets all channels in a team

func (p *Plugin) CreateChannel(channel *model.Channel) (*model.Channel, error)
    // Creates a new channel

func (p *Plugin) UpdateChannel(channel *model.Channel) (*model.Channel, error)
    // Updates a channel

func (p *Plugin) DeleteChannel(channelID string) error
    // Soft deletes a channel

func (p *Plugin) AddChannelMember(channelID, userID string) (*model.ChannelMember, error)
    // Adds a user to a channel

func (p *Plugin) RemoveChannelMember(channelID, userID string) error
    // Removes a user from a channel

Post Operations:
func (p *Plugin) CreatePost(post *model.Post) (*model.Post, error)
    // Creates a new post

func (p *Plugin) UpdatePost(post *model.Post) (*model.Post, error)
    // Updates an existing post

func (p *Plugin) DeletePost(postID string) error
    // Soft deletes a post

func (p *Plugin) GetPost(postID string) (*model.Post, error)
    // Gets a post by its ID

func (p *Plugin) GetPostsForChannel(channelID string, page, perPage int) (*model.PostList, error)
    // Gets posts in a channel

func (p *Plugin) SearchPostsInTeam(teamID string, params *model.SearchParams) (*model.PostList, error)
    // Searches for posts in a team

File Operations:
func (p *Plugin) UploadFile(data []byte, channelID string, filename string) (*model.FileInfo, error)
    // Uploads a file to a channel

func (p *Plugin) GetFile(fileID string) ([]byte, error)
    // Gets file contents

func (p *Plugin) GetFileInfo(fileID string) (*model.FileInfo, error)
    // Gets file metadata

func (p *Plugin) GetFileLink(fileID string) (string, error)
    // Gets public link to file

func (p *Plugin) ReadFile(path string) ([]byte, error)
    // Reads a file from the plugin's directory

func (p *Plugin) WriteFile(data []byte, path string) error
    // Writes a file to the plugin's directory

Key-Value Store Operations:
func (p *Plugin) KVSet(key string, value []byte) error
    // Sets a key-value pair

func (p *Plugin) KVSetWithExpiry(key string, value []byte, expireInSeconds int64) error
    // Sets a key-value pair with expiration

func (p *Plugin) KVGet(key string) ([]byte, error)
    // Gets a value by key

func (p *Plugin) KVDelete(key string) error
    // Deletes a key-value pair

func (p *Plugin) KVList(page, perPage int) ([]string, error)
    // Lists all keys

func (p *Plugin) KVCompareAndSet(key string, oldValue, newValue []byte) (bool, error)
    // Atomic compare and set operation

func (p *Plugin) KVCompareAndDelete(key string, oldValue []byte) (bool, error)
    // Atomic compare and delete operation

Bot Operations:
func (p *Plugin) CreateBot(bot *model.Bot) (*model.Bot, error)
    // Creates a new bot account

func (p *Plugin) GetBot(botUserID string) (*model.Bot, error)
    // Gets a bot by its user ID

func (p *Plugin) UpdateBot(bot *model.Bot) (*model.Bot, error)
    // Updates a bot

func (p *Plugin) PatchBot(botUserID string, patch *model.BotPatch) (*model.Bot, error)
    // Patches a bot

func (p *Plugin) DisableBot(botUserID string) (*model.Bot, error)
    // Disables a bot

func (p *Plugin) EnableBot(botUserID string) (*model.Bot, error)
    // Enables a bot

System Operations:
func (p *Plugin) GetSystemInstallDate() (int64, error)
    // Gets system installation date

func (p *Plugin) GetDiagnosticId() string
    // Gets diagnostic ID

func (p *Plugin) GetServerVersion() string
    // Gets Mattermost server version

Permissions Operations:
func (p *Plugin) HasPermissionTo(userID string, permission *model.Permission) bool
    // Checks if user has permission

func (p *Plugin) HasPermissionToTeam(userID, teamID string, permission *model.Permission) bool
    // Checks if user has team permission

func (p *Plugin) HasPermissionToChannel(userID, channelID string, permission *model.Permission) bool
    // Checks if user has channel permission

Session Operations:
func (p *Plugin) GetSession(sessionID string) (*model.Session, error)
    // Gets a session by ID

func (p *Plugin) CreateSession(session *model.Session) (*model.Session, error)
    // Creates a new session

func (p *Plugin) RevokeSession(sessionID string) error
    // Revokes a session

Webhook Operations:
func (p *Plugin) CreateIncomingWebhook(hook *model.IncomingWebhook) (*model.IncomingWebhook, error)
    // Creates incoming webhook

func (p *Plugin) GetIncomingWebhook(hookID string) (*model.IncomingWebhook, error)
    // Gets incoming webhook

func (p *Plugin) CreateOutgoingWebhook(hook *model.OutgoingWebhook) (*model.OutgoingWebhook, error)
    // Creates outgoing webhook

func (p *Plugin) GetOutgoingWebhook(hookID string) (*model.OutgoingWebhook, error)
    // Gets outgoing webhook

4. LOGGING GUIDELINES

4.1 Log Levels
- Critical: Service unable to continue operating
- Error: Unexpected issues requiring admin action
- Warn: Unexpected but recoverable issues
- Info: Normal operation events
- Debug: Diagnostic information

4.2 Logging Format
- Use key-value pairs for context
- Use snake_case for keys
- Reference JSON struct tags for key names

5. PERFORMANCE CONSIDERATIONS

5.1 Areas Requiring Performance Review
- New features needing benchmarks
- Changes to critical components (Hub/WebConn)
- SQL query modifications
- Goroutine creation
- Memory allocations
- Synchronization primitives
- Regular expressions
- Reflect package usage

5.2 Best Practices
- Avoid pointer to slices
- Use json.Marshal instead of ToJSON methods
- Pre-allocate slices and maps when size is known
- Avoid dynamic regexp.MustCompile
- Control goroutine lifecycles

6. TESTING REQUIREMENTS

6.1 Test Coverage
- Unit tests for new functionality
- Integration tests for API changes
- Performance tests for critical paths

6.2 Test Guidelines
- Test real implementations over mocks
- Use docker containers for external services
- Focus on public API testing

7. BACKWARD COMPATIBILITY

7.1 Considerations
- Maintain API compatibility
- Handle deprecated features gracefully
- Document breaking changes

8. SECURITY BEST PRACTICES

8.1 Guidelines
- Validate input data
- Handle sensitive information securely
- Follow proper authentication/authorization
- Use secure communication channels

Remember to:
- Follow Go best practices from Effective Go
- Adhere to CodeReviewComments guidelines
- Consider performance implications
- Maintain backward compatibility
- Write comprehensive tests
- Document public APIs
